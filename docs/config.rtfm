       __                                                           __
      ,-.`\       =---------------------------------------=        ,-.`\
     :   ; |         :^\   |  |   |^^`   |  '^|^`   /^\           :   ; |
     |  /  |         |-'   |--|   |==    |    |    |   |          |  /  |
     |     |         |     |  |   |      |    |     \_/           |     |
     |     |      =---------------------------------------=       |     |
    _:_____:_                                                    _:_____:_
   <^ \   / ^>         ---  Phfito PHp FIdo TOsser  ---         <^ \   / ^>
  __\ `\v/' /__                                                __\ `\v/' /__
 (q_))  ^  ((_p)         ---  The official RTFM  ---          (q_))  ^  ((_p)
  \_/       \_/                                                \_/       \_/


Этот файл взят с CVS: 
$Id: config.rtfm,v 1.4 2011/01/10 01:55:58 kocharin Exp $

Начнинаем сказочку про глюки, баги... вопчим, мой софт. :-)   И начнем мы ее с 
самого сердца этого всего - с конфига.

За основу конфига взят конфиг хаски. Оттуда взята так сказать "идеология" 
единого конфига для всех программ и некоторые черты формата конфига.

Итак, объектом нашего внимания в течение всего этого файла будет S_config.php.
S - аббривиатура от "shared", означающая, что этот файл используется в очень
многих файлах проекта. Так оно и есть, более того, он используется везде.


                            Глава 0. Читаем конфиг.
                          `========================='

  Предисловие.

Всё чтение конфигурации реализовано через... не подумайте, что через задницу.
:-)))  ... через специальный интерфейс - класс C_configfile_reader. Этот класс 
построчно читает конфиг и интерпретирует его. Он же отвечает за обработку 
специальных символов, if'ов, и подстановку переменных. 

  Служебные символы и экранирование.

Служебными символами считаются:
1) "[" и "]" - см. раздел про переменные.
2) "#" - начало комментария - см. раздел про комментарии.
3) "\" - символ, экранирующий всё вышеперечисленное.

Если интерпретация включена:

Итак, если в конфиге нужны именно эти символы, их нужно экранировать символом
"\", то есть, например, каталог "#qwerty#" в конфиге будет выглядеть как 
"\#qwerty\#".

А простое регулярное выражение на файлы нодлиста будет выглядеть как 
"/^nodelist\\.\[0-3\]\[0-9\]\[0-9\]$/i". Такие конструкции плохо читаемы, так
что при частом использовании регулярных выражений рекомендуется выключать 
экранирование.

  Контроль за интерпретацией:

Есть такая логическая опция - interpret. Логическая - это значит, что она может
принимать два значения - 0 и 1. Тут есть отличие от хаски, где применяются 
on/off.

Итак, для включения интерпретации делаем:
interpret 1

А для выключения:
interpret 0

После этого все символы, перечисленные вверху, будут считаться обычными 
символами, и вы не сможете использовать переменные и комментарии. 

Использование интерпретации сильно уменьшает скорость чтения конфига (примерно 
в 1.5 раза).

Интерпретация включена по умолчанию и действует до interpret 0 включительно и 
после interpret 1 не включительно. То есть:
 set qwe=inter
 [qwe]pret 0
 [qwe]pret 1
будет переведено как:
 interpret 0
 [qwe]pret 1
то есть интерпретация выключится и обратно не включится. :-)

  Переменные:

Как и в хаски (эта фича и была взята из хаски), есть возможность задавать и
использовать переменные. Это такая штука, которая может текстово подставляться
в конфиг. Я приведу пример, сходный с примером хаски:

# Устанавливаем основную директорию.
set fidodir="/fido"
# Инбаунд...
inbound [fidodir]/in

  Предопределенные переменные:

Пока доступна только одна предопределенная переменная - module. Она указывается
как единственный параметр функции aks_init. Если не указана - по дефолту 
"Unknown".

  Условные конструкции и ветвления:

При помощи условных конструкций можно делать конфиг, зависящих от нескольких
факторов, так сказать, окружающей среды. :-)  Например, собрать воедино конфиг 
для разных программ.

Условие - это такая строка, содержащая символ "==" и принимающая значение true 
или false. True, если то, что слева от "==" совпадает с тем, что справа от 
этого, а false - в противном случае.

Общий вид условной конструкции такой:
if условие
(конфиг)
elseif условие
(конфиг)
elseif условие
(конфиг)
...
else
(конфиг)
endif

Например, для тоссера нужно задать один адрес, для мылера - другой. Ставим:
if [module]==Phfito
address 2:50/13.3
elseif [module]==Amfow
address 2:50/13.2
endif

  Кодировка:

Существует способ задать ту кодировку, в которой написан конфиг - параметр
 config_encoding

Поддердиваются пять кодировок: cp866, cp1251, koi8-r, mac и iso.

Пример:
 config_encoding koi8-r

Аналогично можно задать кодировку для вывода логов - параметр log_encoding:
 log_encoding koi8-r

  Заключение:

Проверить, как интерпретируется ваш конфиг (со всеми if, подстановкой 
переменных и прочими интересными вещами) можно проверить скриптом 
E_chkinter.php, запустив его из командной строки с единственным параметром -
именем модуля.

Программа работает с кодировкой cp866. То есть все значения будут выведены
именно в этой кодировке.


                             Глава 1. Типы данных.
                           `======================='

  Предисловие:

Эта короткая глава содержит описания типов данных, использующихся в конфиге...
А конкретно, она объясняет некоторые особенности интерпретации типов.

  Строка:

Обычный тип... Что тут говорить-то? :-)

  Логическое значение:

Эта вещь рассматривается как значение, принимающее два варианта - true и false.
Одну такую штуку мы уже видели при описании токена interpret.

Есть одна особенность, связанная с интерпретацией логических значений в php.
False считается "0" (ноль) или "" (пустая строка). True - всё остальное. То 
есть можно писать:

interpret qwerty   # true
interpret          # false

Но я использую 0 и 1. Чего и вам желаю. :-)

  Пути:

См. описание строки. Но в данном случае отсчет идет от текущего каталога. В 
случае абсолютных путей это не важно, но зачастую используются именно 
относительные пути. Имхо, они удобнее. Итак, отсчет идет от того каталога, из
которого запускается программа (man pwd). Например, вы запускаете тоссер из ., 
а у вас все конфиги лежат в каталоге ./cfg. В файле cfg/config для включения
cfg/route надо писать не include route, а include cfg/route. Но об инклудах
поговорим потом...

  RegExp:

Это - perl-style регулярное выражение. Оно ограничивается слешами. Никаких
модификаторов ставить не нужно, "i" подставляется автоматически. Например:
/\[0-9a-f\]{8}\\.(su|mo|tu|we|th|fr|sa)/ задает регексп на бандлы.

Еще раз замечу, что нужно экранировать символы "\", "[" и "]". Этим можно
объяснить наличие бэкслешей...


                            Глава 2. Файлы конфига.
                          `========================='

  Предисловие:

В отличие от хаски, где только один тип файлов конфига (то есть после обработки
include'ов это - просто один файл), в моем софте есть несколько типов файлов.
Всё это - текст, к которому полностью применимо всё то, что написано выше. Но
всё остальное интерпретируется по-другому. Итак, самый главный файл...

  Главный файл:

Это - основной файл конфига. Он должен быть всегда, должен лежать в текущей
директории и должен называться "config". Он может инклудить себе подобных
с помощью директивы "include <filename>", где filename - имя файла с конфигом. 
Например:
include cfg/route

Чаще всего (по крайней мере у меня) все конфиги лежат в одной директории - cfg.
Поэтому в файле config есть одна-единственная строчка:
include cfg/config

В дальнейшем мы будем рассматривать все файлы этой структуры, то есть главный
файл и все файлы, подключаемые к нему инклудам (они, кстати, могут быть
вложенными).

  Config:

Весь конфиг состоит из строк вида:
 <variable> <value>
Начальные пробелы и пробелы между variable и value игнорируются, насчет 
табуляции ничего не гарантируется, насчет лишних пробелов в value - тоже.

В общем случае такие пары запоминаются программой, сохраняются в конфиг в
виде ассоциативной пары. Однако, есть некоторые параметры, имеющие специальный
смысл. Одно из них - set (описывалось выше, устанавливает значение переменной), 
еще одно - include (описывалось выше, включает файл этого же типа). И есть еще:

# Включаем файл описания эх (см. ниже)
includeareas <имя_файла>

# Включаем файл описания линков (см. ниже)
includelinks <имя_файла>

# Включаем файл описания файлэх (аналогичное эхам)
includefareas <имя_файла>

Прочитав исходники, можно найти includeusers, включающая описания юзеров. В
рамках этой сказочки не рассматривается, т.к. не нашло своего применения и 
вошло в историю...

  Коротко о форматах:

Уфф... Вроде всё описал относительно обработки конфига. Подробности 
относительно конкретных параметров будут в других файлах документации и в
комментированных конфигах.

А пока... Файл описания линков состоит из описания линков. :-)  И описания 
дефолтов. А файл описания эх и файлэх состоит из описания групп, параметров 
эх... ну и тому подобного...


                         Глава 3. Логи, логи, логи...
                       `=============================='

  Предисловие:

К сожалению, пока логи малоинформативны. :-(((

  Логлевелы:

Все сообщения разбиваются на уровни. Они позволяют регулировать типы сообщений,
которые будут идти в тот или иной файл. Например, на одном уровне могут
выводиться сообщения об ошибках, на другом - start/stop. С помощью логлевелов
можно убрать любой из этих компонентов.

Все логлевелы - это цифры 0-9 и буквы: заглавные A-Z и строчные a-z. Уровни
логов недостаточно проработаны, так что сказать что-то определенное насчет
типов сообщений нельзя. Лучше смотрите исходники или понимайте методом тыка.:-)

Могу сказать лишь, что 0-9 - вроде служебные сообщения, A-Z - обычные, а a-z - 
для отладки. 1 - старт/стоп системы, E - сообщения о критических ошибках.

Рекомендую держать два лога: обычный (0-9A-Z) и детальный (0-9A-Za-z). 
Я написал в нотации хаски, тут дефис не поддерживается, пишите все буквы. :-)

  Файлы:

Логи можно перенаправлять в файл. Тут сказать особо нечего кроме того, что есть
такой специальный "файл" - stdout. Если это указать вместо файла, лог пойдет на
стандартный вывод.

  Синтаксис:

LogFile <filename> <loglevels> <delimiter>

Где filename - имя файла-лога, loglevels - см. выше, а delimiter - разделитель 
(см. ниже).

  Разделители:

Имеются в виду разделители строк. По умолчанию используется принятое в *nix
"\n". Но некоторые редакторы под винду это не понимают (фтопку, конечно, эти
редакторы, но...). И еще одно - при "запуске" скрипта браузером (ну то есть
при открытии странички с ним) лог может некрасиво размазаться по экрану.

Итак, для недопущения этого был создан необязательный параметр - разделитель 
строк в логе.

Это - просто строка. Если там есть пробел, ставим в кавычки (впрочем, кавычки
я всегда ставлю - так красивее). 

Если хотим смотреть лог в браузере, делаем примерно так:
logfile stdout 1234567890QWERTYUIOP "<br>"

Результат очевиден? Думаю, да. :-)  Для описания переводов строк (0x0A aka \r и
0x0D aka \n) была введена замена "\r" на chr(0x0D) и "\n" на chr(0x0A). 
Внимание: как я писал раньше, символ "\" нужно экранировать от препроцессора
конфига. То есть пишем не "\r", а "\\r".

Итак, для windoze-like систем можно написать (логлевелы ставьте сами):
logfile log.file 1234567890QWERTYUIOP "\\r\\n"

  Error log:

Есть такой вид логов... Это - не лог ошибок программы, это - лог ошибок в
программе. :-)  Php выдает некоторую информацию об ошибках, они все 
записываются в этот файл. В идеале, программа должна отлавливать все ошибки и 
этот файл должен быть пустым в любом случае.

Формат таков:
ErrLogFile <filename> [-q] [-h]

filename - понятно, что. Тут stdout'а быть не может.

Есть два параметра - "-q" и "-h".

-q, unique - одна ошибка в логе повторяется только один раз. Сделано для 
уменьшения размера лога.

-h, unhandled - в лог не пишутся известные ошибки (очень рекомендуется!).
В случае глюков можно выключить и посмотреть лог - там могут быть сообщения о
криво открытых файлах, но для постоянно применять не надо - захламляет лог. Не
для этого он...

Такой параметр единственен. filename не может совпадать с файлами обычных логов
(вернее, может, но тот, кто использует это - ССЗБ).

  Примеры:

Будут в комментированном конфиге. :-)

У меня сделано так:
ErrLogFile cfg/err -h
LogFile cfg/log 1234567890QWERTYUIOPASDFGHJKLZXCVBNM
LogFile cfg/dlog 1234567890btqwertyuipasdfghjklzxcvnQWERTYUIOPASDFGHJKLZXCVBNM
LogFile stdout 1234567890wryuipasdfghjlzxvnQWERTYUIOPASDFGHJKLZXCVBNM


                            Глава 4. Блокировка...
                          `========================'

  Предисловие:

Довольно неприятная ситуация - запуск одной и той же программы одновременно.
Раньше блокировки не было. Так я попортил несколько squish-баз...

  Лок-файл:

Это файл, при наличии которого программа думает, что запущена другая 
аналогичная программа и выходит, ничего не делая. В этом файле хранится время
в стиле unix, когда был создан этот lockfile. Если после этого момента прошло
слишком много времени, то считаем, что предыдущая программа по ошибке забыла
его удалить, и запускаемся.

  Описание лок-файла:

Тут описание довольно простое:
lockfile <имя_файла>

Естественно, что сам файл и директория, в которой он хранится, должны быть 
доступны на запись.

  Locktime:

Этот параметр задает время (в секундах), по истечении которого считаем, что 
файл блокировки "протух". По умолчанию - 300 сек, то есть 5 минут.

Пример:
locktime 600   # 10 minutes

  Постскриптум:

Иногда можно допустить запуск двух различных программ (например, тоссера и 
мылера). Тогда можно применить условную трансляцию конфига:

if [module]==Phfito
  lockfile lock/phfito-lock
elseif [module]==Amfow
  lockfile lock/amfow-lock
else
  lockfile lock/unknown-lock
endif

                        Глава 5. Основные переменные.
                      `==============================='

  Предисловие:

Тут описаны параметры, которые используются практически везде. Их очень
рекомендуется указывать... Пока тут только один параметр - tempdir.

  TempDir:

Этот параметр задает каталог для временных файлов. Естественно, что он должен
быть открыт на запись...


                      Глава 6. Описываем свою систему.
                    `================================='

  Предисловие:

Тут описываются переменные, задающие адрес системы, имя сисопа, станции и т.п.

  Address:

Это - 4d-адреса нашей системы. Вернее, 4d или 3d. На каждый aka приходится 
одна строчка address в конфиге. Первый встретившийся адрес считается основным,
дефолтным, а остальные - ака. Приведу пример:

address 2:50/13
address 2:5012/2.470
address 2:5012/37.5
address 2:5080/147.50

  System & Location:

Эти два параметра задают имя системы и ее положение соответственно. 
Используются в основном в декоративных целях. Например, в сообщениях роботов.

system AK-Station
location Kurgan, Russia

... и конец сообщения о новых эхах на узле будет выглядеть так:
-+- Phfito Tracker on AK-Station
 + Origin: AK-Station, Kurgan, Russia (2:50/13).

  SysOp:

А этот параметр я уже не помню где применяется. Ну в мылере - точно есть, в
"emsi", а в тоссере... а х его з... Но лучше его заполнить. :-)


                       Глава 7. Установка директорий.
                     `================================'

  Предисловие:

Тут написаны директории, используемые этой программой. Впрочем, похожие
директории используются, наверное, всеми тоссерами, кроме уж очень 
экзотических... :-)  Итак...

  Inbound:

Место, куда мейлером ложатся файлы, пришедшие от линков, называется инбаунд. 
:-)  Собсстно, тут объяснять, имхо, ничего не надо...

  Outbound:

А сюда ложатся файлы, которые идут к линкам. Имеет формат BSO (binkleyterm
style outbound), другие форматы тоссером пока не поддерживаются. Если надо -
пишите, постараюсь привернуть... :-)

  LocalInbound:

Место для локальных пакетов. Обязательно указывать! В моем тоссере это 
используется особенным образом - все исходящие сообщения (репорты, 
отсканированные сообщения, квитки и пр.) пакуются на себя же в локальный
инбаунд, а потом тоссятся как обычные пакеты. Соответственно, директория нужна.

Если там "залип" файл с расширением tpk, в котором есть что-то важное и не 
растоссился по каким-либо причинам, убедитесь в том, что его содержимое еще
не отправилось и переименуйте его в pkt. Тогда оно отправится...

  TempInbound, TempOutbound и TempDir:

Директории для временных файлов, в основном - для операций распаковки/запаковки
бандлов. Это может быть одна и та же директория. Хотя лучше таки отделять мух
от котлет (ц)...

  MsgBase:

См. выше, директория для хранения базы для вновь пришедших эх.

  DupeBase:

Формат конфига такой:
DupeBase TYPE PATH

Где type - тип базы (old, files, sql), path - путь к базе.

Формат old прост: записывается crc32 от msgid отдельно для каждой эхи. 
Использование не рекомендуется из-за вероятности коллизии.

Формат files пишет crc32, msgid и время отправки письма. Одинаковыми 
считаются письма, которые пришли в одну эху с одним msgid и разницей времени 
отправки менее полугода.

Формат sql аналогичен files с разницей, что всё это хранится в sql-базе.

 

                           Глава 8. Роутинг мыла.
                         `========================'

  Предисловие:

Ну тут опишем только один-едиственный параметр понятно какой. В будущем я хочу
прикрутить поддержку .rou файлов, но это - потом. А сейчас...

  Route:

Идея этого параметра взята из хаски, всё описание похоже. Разве что мы умеем
регулярные выражения perl-style.

Общий вид этого параметра таков:
 route <destination> <mask_or_regexp> <mask_or_regexp> ...

В качестве destination может быть либо ftn-адрес того узла, куда надо роутить
почту, либо одно из ключевых слов:
 - unknown  - роутинг неизвестен (в таком случае тоссер отправляет отлуп)
 - host     - роутинг на хост сети (для aa:bb/cc.dd роутим на aa:bb/0)
 - boss     - роутинг на босса узла (для aa:bb/cc.dd роутим на aa:bb/cc)
 - direct   - роутинг именно на тот узел, на который адресовано письмо

Внимание: флаги не поддерживаются. Строки обрабатываются по порядку
их нахождения в конфиге.

Ну, например, так можно роутить мыло на всю фидошку:
 route 1:2/3 1:* 2:* 3:* 4:* 5:* 6:*
Или так:
 route 1:2/3 /^\[1-6\]:/

Каждая нода a:b/c проверяется дважды: как a:b/c и как a:b/c.0

Например, так можно организовать роутинг на своих линков (и их пойнтов):
 route boss 1:2/3.* 1:2/4.* 1:2/5.*

Вроде всё очевидно. :-)


                              Глава 9. AreaFix.
                            `==================='

  Предисловие:

Здесь описаны настройки areafix'а - робота, управляющего подпиской линков на
эхи.

  AreafixHelp:

Задает имя файла, содержащего хелп к ареафиксу, высылающийся по запросу %help. 
Файл - обычный текстовый файл в кодировке koi8-r. Если такой параметр не задан,
линку хелп не высылается.

  AreaFixAvail:

Полностью аналогично предыдущему, но файл высылается по %avail.

  RulesDir:

Директория с правилами эх в Зельдерновском формате. То есть, например, точка 
заменяется на "_". Высылается линку при его подписке ему прямо в эху, если 
включено pushmsg. См. ниже.

  Push messages:

Это - такое сообщение, которое высылается линку при его подписке на эху, если
эта эха у нас есть. Оно высылается прямо в эху, пакуется только для этого
линка. Оно нужно для того, чтоб создать у линка эту эху. Это сообщение содержит
правила этой эхи, если они доступны. См параметр pushmsg в конфигурации линков.
Каждый линк может включить или выключить параметр запросами %pushmsg 1 и
%pushmsg 0 соответственно.


                    Глава A. Очередь и forward-requests.
                  `======================================'

  Предисловие:

Полезная штука, однако... :-)  Если линки запрашивают эху, которой у нас нету,
отправляются запросы другим линкам на получение этой эхи... Ну и тут я описываю
то, как такие запросы можно настроить.

  QueueFile:

Записи о всех форвард-реквестах пишутся в специальный файл - queuefile.
Он задается одноименным параметром в конфиге. Насколько я знаю, по формату
он не совместим ни с хаски, ни с чем другим...

  Отчеты, ReportTo:

ReportTo - эха, куда надо постить отчеты. См. описание ниже.

При любом изменении состояния форвард-реквестов (при удалении, изменении или 
добавлении новой записи) в эху, указанную в ReportTo, постится отчет о
форвард-реквестах. Также он постится туда каждый день при наличии реквестов.

  Структура queuefile:

Первой строкой файла идет timestamp последнего репорта о форвард-реквестах.

Далее идут строки собсстно с описанием запросов. Каждая строка - это набор 
полей, разделенных запятыми.

Первое поле - действие, которое производится с эхой:

FREQ - запрос эхи. При ее приходе строчка удаляется, эха создается и на нее 
подписываются нужные линки. По истечении таймаута заменяется на KILL и идет
запрос далее по линкам...

IDLE - режим, при котором письма в эху еще тоссятся, но линк готовится к
разрыву... По истечении таймаута заменяется на KILL и шлется отписка от эхи к
линку.

KILL - режим, при котором сообщения от линка удаляются. Просто удаляются, не 
попадая ни в эху, ни в bad. По истечении таймаута строчка исчезает.

Второе поле - это нужная эха, а третье поле - timestamp последнего изменения 
строки.

Четвертое поле - линк или список линков в формате:
<link>=<timeout> <link>=<timeout> ...

При FREQ там может быть очередь линков, по истечении таймаута на первом линке
на него ставится KILL (и шлется отписка от эхи его афиксу), и идет запрос эхи
у следующего линка.

При IDLE и KILL - там только один линк, понятно, что он означает...

Таймаут - максимальное время выполнения действия (в днях).

И последнее, пятое поле заполнено при FREQ. Это - список линков, желающих
получить эху. Соответственно, при получении эхи они на нее подписываются.
В отчете о форвард-реквестах фигурирует только один, первый в этом списке, 
линк.

  Forward:

Этот параметр задает правило, по которому надо обрабатывать форвард-реквесты.
Таких правил, как правило, несколько, и они все обрабатываются последовательно.

Формат строки:
 forward <link> <timeout> <rule>

... где link - аплинк, к которому пойдет запрос в случае выполнения rule, а
rule - это маска или имя файла. Короче, возможны три варианта строки forward:

1) forward <link> <timeout> List:<filename>

filename - список эх у этого линка. Запрос будет идти тогда, когда требуемая
эха будет в этом файле.

2) forward <link> <timeout> Mask:<mask_or_regexp>

Тут запрос пойдет на линка, если эха подпадает под маску или регулярное 
выражение после "Mask:".

3) forward <link> <timeout> *

Запрос на линка будет идти всегда.

Приведу примеры:

forward 1:2/3 10 List:cfg/1_2_3.lst
forward 2:3/4 10 Mask:/^(mo|spb|n5020|n5030)\\./
forward 1:2/3 10 Mask:ru.*
forward 1:2/3 20 *

Итак, например, эха spb.qwerty присутствует у 1:2/3. Тогда она будет проситься
сначала у 1:2/3 в течение 10 дней (т.к. присутствует в 1_2_3.lst), потом - у
2:3/4 10 дней (так как попадает под регексп), третью строку пропускаем, а потом
подписка опять пойдет на 1:2/3 по последнему правилу.

  Freqtimeout, idletimeout, killtimeout:

Эти значения задают таймауты при выполнении соответствующих действий... Первое
пока нигде не используется, а вот второе и третье рекомендую указывать...

Единственный параметр у этих кейвордов - таймаут (в днях).


                            Глава B. Autocreate.
                          `======================'

  Предисловие:

Эта глава посвящена автосозданию эх... Если приходит новая эха, тоссер 
прописывает ее в конфиг. А если бы такой системы не было... Хех... Даже не
представляю, как сисоп, не знающий скриптовых языков типа перла станет 
прописывть в конфиг пару тысяч эх... :-)))

Короче, функция важная и полезная. А тем, как что куда писать, управляют 
параметры конфига, указанные ниже.

  AutoAreaCreateFlag:

Здесь многое взято из хаски. В том числе, некоторые ключевые слова. Например,
это. Но тут оно имеет немного другое значение.

Итак, файл прописанный в этом параметре, появляется при создании новых эх на
узле. И в этот файл дописываются все эхи, созданные на узле. То есть в конце
получается такой список вновь созданных эх...

Таких параметров может быть несколько. Например, если нужно обрабатывать 
такую ситуацию другим тоссером и скриптом, сортирующим конфиг (а вдруг?), тогда
можно записать несколько подобных кейвордов:
 autoareacreateflag flags/for_tosser
 autoareacreateflag flags/for_sorter

  Локальные эхи:

Мой тоссер умеет сам создавать некоторые технические локальные эхи, если они
требуются, но не прописаны в конфиге. Это - бэды, дупы, нетмайл и эхи для 
отчетов и статистики. Это можно включить и будет счастье. :-)  То есть при
написании конфига можно не указывать никакие эхи вообще. Насколько это кошерно,
каждый для себя решает сам. :-)

  AutoAreaCreate:

Этот параметр задает то, крейтить ли вообще эхи. Этот параметр указывается при
описании линка и влияет на создание линком эхи. Но он же может указываться
в основном конфиге - тогда он включает автосоздание локальных эх (см. выше).

  AutoAreaCreateFile и AutoAreaCreateTable:

Первый параметр задает имя файла, куда дописывается эха (основной конфиг), 
а второй параметр - имя файла, куда дописываются права на эху (дадад, эха
задается двумя строчками в конфиге, в отличие от хаски. Это я опишу позднее).

Эти параметры могут быть как в описании линков, так и в основном конфиге. Для 
создания локальных эх значения берутся из основного конфига, а для создания
эх от какого-нить линка - из описания этого линка, а потом - из основного 
конфига, есть для линка этот параметр не задан. 

Если второй параметр не задан, он принимается равным первому.

  AutoAreaCreateDefaults:

Это - строка, содержимое которой добавляется в описание эхи при ее 
автосоздании. Тут не рекомендуется указывать группу (для этого есть другие 
параметры) и нельзя указывать линков (для этого есть группы).

Параметр обхода конфига на предмет этого значения аналогичен предыдущему, то 
есть для локальных эх смотрим локальный конфиг, а для эх от линков смотрим
описание линка, а потом уже - локальный конфиг.

  AutoAreaCreateGroup:

Этот необязательный параметр задает то, в какую группу помещать эху, созданную
от этого линка. Он может находиться только в описании линка.

  CreateAreasCase:

Эхи создаются в определенном регистре. И именно этот параметр задает то, в
каком регистре эту эху создавать. Как и в хаски, может создаваться в верхнем
регистре (прописными буквами) и в нижнем регистре (строчными буквами). Но есть
еще один регистр: mixed. Тут комбинируются оба варианта. :-)  То есть программа
пытается начинать слова с большой буквы и продолжать их строчными буквами.
Например, "R50.Sysop" или "Ru.Computer.History". У меня включен именно этот
режим... Хотя это - кому как нравится. :-)

Использовать, соответственно, так:
 createareascase lower
 CreateAreasCase Mixed
 CREATEAREASCASE UPPER
Регистр не имеет значения, такой пример я привел лишь для визуализации. :-)

  AreasFileNameCase:

В точности то же самое, что и предыдущее, но в применении к именам файлов. Ну
идея взята из хаски. :-)

Замечу лишь, что имена файлов могут иметь особые значения в некоторых типах
баз. Например, в phpbb это - имя раздела форума.

  CreateGroupMask:

При помощи этих параметров можно назначать группу эхе в соответствии с ее 
эхотагом. Например, можно все эхи *sysop* выделять в отдельную группу и
запретить писать туда пойнтам. Просто потому, что эха имеет в названии "sysop".
:-)  Ну или *.filtered - тож полезно бывает. Или выделить все эхи mo.* в
одну группу, все spb.* - в другую, а ru.* - в третью. Как фантазии хватит. :-)

Этот параметр затирает AutoCreateAreaGroup у линка, если он задан. Старайтесь
не использовать их вместе во избежание...

Итак, этот параметр находится в основном конфиге и имеет вид:
 creategroupmask <group> <mask>
Mask - это обычная файловая маска или perl-style регулярное выражение. При 
использовании последнего не добавляйте в конце модификаторы (то есть оно
должно ограничиваться слэшами) и не забывайте про экранирование...

Последней строкой рекомендую поставить дефолтную группу и маску '*'.

Итак, я, наверно, просто приведу примеры...
 creategroupmask A *sysop*
 creategroupmask B /filtered$/
 creategroupmask M /^(mo|n5020)\\.sysop$/
 creategroupmask R *

  MsgBase:

В качестве пути с базе сообщений текстово подставляется эта переменная. Это - 
имя директории, куда предположительно будут ложиться базы сообщений в новых
эхах.

Следует отметить, что можно задавать эту переменную именно как переменную. :-)
То есть не задавать явно, а сделать так, чтоб она подставлялась как переменная.
Ну чтоб путь к базе выглядел так:
 [msgb]/qwe.rty
В хаски экранирования нет, такой финт не пройдет. А здесь можно сделать:
 set msgb=/fido/msgb
 msgbase \[msgb\]
И эхи будут создаваться с подстановкой [msgb] вместо пути. :-)

  ReportTo:

Сюда будут поститься сообщения о новых эхах. См. описание ниже.


                               Глава C. MySQL.
                             `================='

  Предисловие:

Мои программы поддерживают много типов баз. В том числе и базы, основанные на
MySQL. Для доступа к мускулу необходимо задать некоторые параметры... Впрочем,
пока их очень не много.

  MySQLhost:

Параметр, задающий хост с сервером mysql. Необязателен, по дефолту - localhost.

  MySQLuser & MySQLpass:

Этот параметр задает имя пользователя и пароль к базе данных. По умолчанию - 
доступ без предьявления имени пользователя и пароля. 
  

                          Глава D. Настройки phpBB.
                        `==========================='

  Предисловие:

Здесь можно найти параметры, отвечающие за настройку тоссинга из/в базу phpBB.

  Phpbb_version:

Эта строка задает версию phpbb в свободной форме. :-)  Пишется в @PID. По 
умолчанию - просто "phpBB".

  Phpbb_tearline:

Задает строку, которая вставляется в tearline сообщений с форума. По 
умолчанию - "Powered by <то, что в @PID>".

  Phpbb_origin:

Ну а это задает ориджин. По умолчанию - красивая надпись: "Fidonet rulezz 
forever!!!"

  SmallNuke_override:

Тут можно перекрыть таблицу пользователей. По умолчанию - {prefix}users. В
случае использования обычного phpbb задавать этот параметр не нужно. Но кое-где
(например, в smallnuke - отсюда и название) таблица с юзерами имеет другое
имя, отличное от стандартной. В таком случае и поможет этот параметр...

Типичная строка для smallnuke: smallnuke_override smallnuke_users


                        Глава E. Прочие фичи тоссера.
                      `==============================='

  Предисловие:

Ну тут куча интересного... :-)

  DefArcmailSize:

Этот параметр задает максимальный размер бандла для линков в килобайтах. По
дефолту - 512k. Этот параметр можно перекрыть для отдельных линков при их
описании.

  OutBundleBase:

Этот параметр определяет то, от чего отсчитывать пути в BSO. Может принимать 
значения:

full - подставлять в лошку полный путь к файлу. Рекомендуется при 
ненахождении мылерами файла.

current - подставлять во лошку относительный путь от текущей директории.

out (default) - относительный путь относительно каталога с лошкой.

Этот параметр может задаваться как в основним конфиге, так и при описании 
линка. Соответственно, во втором случае - действует на линка, в первом - на
тех линков, для которых он не задан при их описании.

  OutBundleAct:

А этот параметр определяет действие, которое выполнит мылер после отправки
бандла (он же - префикс файла в лошке). Возможные значения:

keep - сохранять отправленные бандлы там, где они и лежали (префикса нету).
trunc - оставлять бандлы, но обрезать их до нулевого размера (префикс - '#').
del (default) - удалять бандлы после отправки (префикс - '^').

  NoZoneGating:

Логическое значение, которое влияет на то, надо ли удялять синбаи для других
зон, как этого требует fts, или сохранять их, надеясь на то, что не попадется
двух нод в разных зонах с одинаковым 2d-адресом.

Соответственно, "nozonegating 1" сохраняет синбаи при зонгейтинге.

  BadKill & DupeKill:

Эти логические параметры задают то, нужно ли сохранять бэды и дупы в 
соответствующие эхи. Если они включены, дупы или бэды соответственно не будут
сохраняться в dupearea и badarea.

Если эти параметры не заданы (по дефолту), тоссер будет пытаться сохранять
сообщения в эти служебные эхи и создавать эти эхи, если их нет.

  NoBadSave & NoDupeSave:

Тоссер может сохранять пакеты, в которых были обнаружены дупы или бэды,
переименовывая их, добавляя расширение '.dup' и '.bad' соответственно.

Можно не сохранять такие пакеты, используя эти параметры. 
 NoBadSave 1 - не сохранять пакеты с бэдами,
 NoDupeSave 1 - то же самое с дупами.

  ReportTo:

Этот параметр задает эху, в которую надо отсылать отчеты о новых эхах и о
forward-реквестах. Вообще, этот параметр может быть использован при постинге
других отчетов.

Это может быть любая эха, это может быть нетмайл. Если эхи не существует, она
создается.


                             Глава F. Статистика.
                           `======================'

  Предисловие:

Тоссер умеет собирать статистику о линках и эхах в специальные бинарные файлы.

Для эх хранятся данные о сообщениях и размерах сообщений в эхе, и об объеме
участия в это деле нашей ноды.

Для линков - сколько получено и сколько отправлено в байтах и в сообщениях. :-)

  StatisticsDir:

Этот параметр задает директорию, в которой хранятся файлы статистики. Этих
файлов 6:
 - areas_daily.stat: статистика эх с шагом в день
 - links_daily.stat: то же для линков
 - areas_weekly.stat: статистика эх с шагом в неделю
 - links_weekly.stat: то же для линков
 - areas_monthly.stat: статистика эх с шагом в месяц
 - links_monthly.stat: то же для линков

  Формат файлов:

Каждый файл состоит из записей, каждой эхе (в areas*) или линку (в links*) 
соответствует одна запись.

Первым полем в этой записи является эхотаг или адрес линка соответственно.
Это поле - единственное null-terminated, остальные поля имеют фиксированный
размер.

Следующее двухбайтовое поле задает offset последней ячейки в таблице 
относительно ее начале, к этому мы еще вернемся.

Далее в этой записи идет таблица, состоящая из 80 строк длиной 18 байт, 
соответственно общий объем таблицы - 80*18 байт.

Каждая строка - это пять полей:

Первое поле - id текущего дня, недели или месяца (в зависимости от шага), это -
два байта.
id выбирается так, что каждому дню, месяцу или недели соответственно
соответствуют уникальные id и для соседних дней (месяцов или недель) они
отличаются на 1.
Я сделал такой алгоритм вычисления (time - текущее unixtime, y - год (0-99), 
m - месяц (1-12)):
 - для дней: (int)(time/3600/24)&65535
 - для недель: (int)(time/3600/24/7)&65535
 - для месяцов: (y*12+m-1)&65535
Получается, что неделя кончается в среду. Считаем особенностями реализации. :-)

Второе, третье, четвертое и пятое поля - собсстно сама статистика, она содержит
по 4 байта и имеет различный смысл для линков и для эх:

Второе поле для эх - это общее количество сообщений в эхе, а для линков - 
количесто сообщений, полученных от линка.

Третье поле для эх - общий объем сообщений, для линков - объем почты, 
полученной от линка.

Четвертое поле для эх - количество сообщений в эхе от нашего узла (со всех
адресов, указанных в address и их пойнтов, если адреса узловые), для линков -
количество сообщений, упакованных на линка.

Пятое поле для эх - объем сообщений в эхе от нашего узла, для линков - 
объем почты, упакованной на линка.

  Обработчик статистики:

Я тут написал небольшой скриптик, который умеет генерить некоторую статистику 
по этим данным. Это - L_genstat.php. Я потом задокументирую...


                         Глава 10. Описываем линков.
                       `============================='

  Предисловие:

IncludeLinks в главном конфиге подключает конфиг линков. Ниже вы увидите 
описание параметров этого конфига.

Так как я раньше пользовался hpt, конфиг практически совпадает с конфигом hpt.
Но не полностью...

  Структура файла:

Этот файл состоит из записей, каждая запись - это описание одного линка или
запись умолчания (aka дефолтных значений параметров) последующих линков.

Каждая запись начинается с "linkdefaults" (для задания дефолтов) или с 
"link <link_name>" (для задания линка). Значение после слова Link определяет
имя сисопа этого линка.

В хаски linkdefaults может быть много, каждый linkdefaults затирает предыдущую.
Тут linkdefaults обычно только один. Хотя ничто не запрещает использовать
несколько описаний дефолтов, ничего насчет этого не гарантируется. Попробуйте, 
посмотрите код, подумайте... :-)

В следующих версиях, наверное, linkdefaults уйдет в прошлое и заменится 
параметром linkgroup, и появится понятие "группа линков".

А сейчас рассмотрим возможные параметры линков. Замечу, что для линков 
ни один параметр не может повторяться, в пределах одного линка параметры
уникальны. Если не задан параметр xxx у линка, он берется из linkdefaults, 
если он, конечно, там есть.

  OurAka:

Этот параметр определяет наш ака для этого линка. Письма к его афиксу будут
писаться от этого ака, паковаться pkt будут от этого ака, и т.п...

  Password:

Наш пароль на этого линка. Это - пароль на всё, на афикса, на pkt... Пока мы
не умеем различные пароли. Если надо будет, сделать недолго...

  AllowEmptyPktPwd:

Этот параметр разрешает пустые пароли на pkt от линков. По умолчанию пустые 
пароли не принимаются.

  OutBundleBase & OutBundleAct:

Эти параметры определяют содержимое лошек на заданного линка. См. описание
аналогичных параметров в основном конфиге.

  Автосоздание эх:

В описании линка можно указать некоторые параметры автосоздания эх от этого
линка. Все подробные описания можно найти выше, в главе "Autocreate", а тут
я просто приведу краткие описания возможных параметров.

AutoAreaCreate - логическое значение, определяющее то, нужно ли создавать эхи
при их приходе от заданного линка.

AutoAreaCreateFile, AutoAreaCreateTable - эти два параметра задают файлы, в 
которых будут приписываться новые эхи.

AutoAreaCreateGroup - группа для эх, создаваемых от этого линка.

AutoAreaCreateDefaults - дефолтные параметры эхи.

  Pause:

Это логическое значение может приостановить паковку на линка эхопочты. 
Соответственно, при "pause 1" линк не будет получать эхи, но будет иметь 
возможность в них писать.

Этим параметром может управлять сам линк путем отправки афиксу %pause 
(остановить паковку) и %resume (возобновить ее).

  DefArcmailSize:

Максимальный размер бандла на этого линка в килобайтах, при его достижении 
тоссер начинает паковать новый бандл. Параметр не обязателен, по дефолту - 
512k.

В будущем, наверное, стоит предусмотреть возможность смены этого параметра 
линком при запросе ареафиксу. Но пока этого нету...

  SendPushMsg:

Этот параметр задает то, нужно ли отсылать линку при подписке так называемое
push message. См. описание в главе про ареафикс.

Линк может включить эту возможность или отключить ее, отправив "%pushmsg 1" или
"%pushmsg 0" соответственно нашему ареафиксу.

  Hidden:

Этот параметр используется скриптом статистики, он определяет то, нужно ли
отображать линка в статистике.

Для того, чтоб не отображать его, ставим 'hidden 1'.

Например, если нам не нужно отображать свой узел (письма стстистики, карбонка
и прочее учитываются как сообщения от самого себя), прописываем самого себя
как линка и пишем ему 'hidden 1'.

Если требуется, чтоб показывались только нужные линки, а все остальные (в том
числе не описанные в конфиге) не отображались в статистике, ставим 'hidden 1' 
в linkdefaults и перекрываем его 'hidden 0' у нужных линков.


                            Глава 11. Amfow_disk...
                          `========================='

  Предисловие:

Вообще-то к тоссеру это никакого отношения не имеет... Это - мейлер, который
занимается перемещением файлов по диску...

Он может "принимать почту", то есть банально копировать все файлы из заданной
директории в свой инбаунд или "отправлять почту", то есть копировать все
файлы на линка из bso в специально подготовленную папку.

  Настройка:

Он настраивается очень легко. Необходимы только два параметра в основном
конфиге (inbound и outbound) и два параметра для нужных линков в конфиге 
линков.

Inbound - директория, в которую будут перемещаться файлы из нужных каталогов.
Outbound - директория, в которой хранится почта на линков в bso.

Для каждого нужного линка (ну или, используя linkdefaults) задаем в конфиге
два параметра:

MoveFrom - директория, в которой находятся бандлы к нам.
MoveTo - директория, в которую посылаем бандлы к линку.


                           Глава 12. Опишем наши эхи
                         `==========================='

  Предисловие:

Идея такого описания эхи взята из хаски. Как и многое тут... Но здесь это
немного изменено. Линки сейчас описываются отдельно от эхи. Но об этом потом.
Введено понятие дефолтов группы вместо дефолтов для всех эх. Ну и произведены
некоторые модификации...

Каждая эха описывается двумя строками: это само описание эхи и описание линков
эхи. Тут мы коснемся только первой строки. Дык вот...

  Типы эх:

Как и в хаски, есть пять типов эх: обычные, локалки, дупы, бэды и нетмайл.

0: Обычные эхи - описываются словом EchoArea, везде видны (если не определено
обратное), на них могут подписываться (если разрешено) линки и т.п. Короче,
обычная эха. :-)

1: Локальные эхи - эхи, которые ходят внутри одного узла. Описываются, начиная
словом LocalArea. Они не видны в %list, на них не могут подписываться. Но эти 
эхи могут иметь линков, хотя это и не нужно...

2: Бэды - так обычно описывается одна (!) эха (их может быть много, но бэды
валятся только в одну - первую), в которую валятся кривые сообщения, сообщения 
от линков, не подписанных на эху и пр. За подробностями -  в сучайник. 
Описание начинается с BadArea, кроме того, что сюда ложатся бэды она ничем
не отличается от локальной.

3: Дупы - полностью аналогично предыдущему, но сюда идут не бэды, а дупы - это
сообщения, которые когда-то уже тоссились на нашей системе. Вот они пришли
еще один раз, а два одинаковых сообщения в эхе нам не нужны. :-) 
Дупы отлавливаются по crc от msgid.

4: Нетмайл-эхи - это эхи с нетмайлом. Их может быть много, актуальна только
одна - первая. Эти эхи не могут иметь линков вообще (прописать можно, но 
никакого смысла это не имеет), нигде не видны. Описание начинается с 
NetmailArea.
 
  Описание эхи:

Строка описания эхи должна присутствовать для всех имеющихся у нас эх (в 
отличие от необязательного описания линков эхи), ее формат - это формат хаски:

<keyword> <areatag> <path> <key> <var> <key> <var> <key> <var> ...

Если какой-нить параметр содержит пробел, его (параметр) нужно взять в
кавычки.

То есть сначала идет ключевое слово:
 EchoArea - для обычных эх
 LocalArea - для локальных эх
 BadArea - для бэдов
 DupeArea - для дупов
 NetMailArea - для нетмайла
Описание каждого из них - см. выше.

Дальше идет эхотаг эхи. Ну это - понятно что...

Далее идет путь к базе - см. ниже.

А дальше идут пары "ключ"-"значение", разделяемые пробелом. Каждый ключ
начинается с дефиса ("-"). Описание возможных ключей можно посмотреть ниже.

  Путь к базе:

Это - путь к базе. :-)  К базе, в которой хранятся сообщения. :-)

Для opus - это путь к каталогу с файлами.
Для баз jam, squish или fips - путь к файлам (включая имя файла, но без 
 расширения).

Для passthrough (тип pass) путь значения не имеет.

Для mysql он указывается особенным образом:
 /<database>/<table>
в случае хранения сообщений в отдельной таблице для каждых эх, или
 /<database>/<table>/<area>
в случае хранения всех сообщений во всех эхах в одной таблице.

То есть первым указывается база данных (первый слеш не обязателен), потом идет
таблица эхи (или эх), потом поле area таблицы (если оно нужно).

Замечу, что точки в именах таблицы не допустимы. Замените их на другие символы,
например,на знак подчеркивания. Настоящие_программисты_пробелами_не_пользуются. 
:-)
Например храним эху в отдельной таблице:
 /fido/my_cool_area
или всё в одной куче:
 /fido/msgb/my.cool.area

Для phpbb путь указывается почти так же:
 /<database>/<prefix>/<forumname>
Где database - имя базы данных, prefix - префикс у phpbb таблиц, а forumname -
имя раздела форума.

Имя раздела пишется в той кодировке, в которой работает phpbb (чаще всего - 
windows-1251), если оно содержит пробелы, весь путь заключаем в кавычки.
Например:
 /phpbb/phpbb_/mo.echo
или
 "/phpbb/phpbb_/Это - эха fidonet"

  Параметры эхи:

Далее идут параметры эхи:

"-b" - тип базы, значение - любой поддерживаемый тип базы (squish, opus, jam, 
fips, phpbb, mysql или pass), записанное в любом регистре.

У каждой эхи должен быть указан обязательно явно или косвенно (через
дефолты).

"-g" - группа эхи. Естесстно, через дефолты задавать бессмысленно. :-) Чаще
всего это - одна буква, совместимость с "длинными" названиями групп не
тестировалась.

"-d" - описание эхи. Необязательно. Оно отображается в редакторах, в отчетах
от ареафикса. Так же оно ставится как описание форума в phpbb скриптом 
U_phpbb.php.

"-category" - имеет смысл только для phpbb, это - порядковый номер раздела
(категории) форумов. Используется скриптом U_phpbb.php.

Типичные описания эх:
EchoArea r50.sysop /fido/msgb/r50.sysop -b squish -g A -d "SysOp's echo"
BadArea badarea /fido/msgb/bad -b opus -g B -d "Bad Area"
DupeArea dupes /fido/msgb/dupes -b opus -g B
LocalArea carbon /fido/msgb/carbon -b jam -g C -d "Personal mail"
NetmailArea netmail /fido/mail -b opus -d "My NetMail area"


                           Глава 13. Режимы подписки.
                         `============================'

  Предисловие:

В отличие от конфига хаски, тут линки и параметры линков на конкретные эхи
описываются отдельно. И вместе с этим задаются параметры подписки: доступно
ли чтение, запись, скрыта эха, невозможна подписка и пр.

  Описание:

Эта строчка описания режимов подписки имеет вид:
EchoMode areatag[:mode] link:mode link:mode link:mode link:mode ...

То есть первым словом идет ключевое слово EchoMode вне зависимости от типа эхи
(хотя для не EchoArea она используется редко).

Дальше идет эхотаг (ака название) эхи и через двоеточие необязательный 
параметр: дефолтный режим подписки для не прописанных линков.

Далее идут пары link - mode, разделяемые двоеточием, где link - фидошный 4d 
(или 3d) адрес, а mode - режим эхи по отношению к этому линку.

Описание режимов можно посмотреть ниже...

  Режимы подписки:

Это - строка из строчных или заглавных латинских букв, цифр и символа 
отрицания: "!", который нужен для отрицания буквы, заданной в дефолтах.

Например, в дефолтах на эху стоит rw, мы можем запретить запись в эху линку:
 EchoMode R50.SysOp:rw 2:50/13.123:r!w

... или запретить доступ вообще:
 EchoMode R50.SysOp:rw 2:50/13.123:!r!w

Каждая буква имеет специальный смысл, их порядок значения не имеет.

Например:
 2:50/13:r!wl
это то же, что и
 2:50/13:lr!w
(отрицание, есстно, должно быть перед тем, что оно отрицает. :-) )

Цифры могут являться значениями определенных параметров, но пока такие
параметры не определены. В будущем появится параметр F, задающий область
распространения эхи, обеспечиваемую данным линком.
(гордо так) В других тоссерах я такого не видел...

Но пока этого нету, есть только...

  Параметры доступа:

'w' - параметр, который означает то, что если линк подписан на эху, он может
ее читать. Рекомендуется ставить всегда дефолтовым параметром на эхи или, 
лучше, на их группы, и перекрывать параметром '!w' по мере надобности.

'r' - параметр, похожий на предыдущий, он означает то, что этому линку
разрешено читать эху, если он на нее подписан. Так же очень рекомендую ставить
дефолтом на эхи и группы и перекрывать '!r' в тех редких случаях, когда 
требуется режим write-only.

'l' - параметр, означающий то, что линк подписан на эху. Замечу, что сами по
себе параметры 'r' и 'w' ничего не дают. Линк должен быть подписан на эху,
то есть для него должен быть выставлен параметр 'l'. Например, линк НЕ будет
получать почту только при поставленном 'r' или только при 'l'. Нужен 'rl'
(соответственно, чтоб писать, нужен 'wl', полный доступ - 'rwl').

Так как 'r' и 'w' чаще всего уже выставлены в качестве дефолтных параметров,
линку в большинстве случаев приписывается просто 'l' (а 'r' и 'w' берутся
из дефолтов). Про обработку дефолтов будет написано ниже, в главе про группы.

Параметр 'l' - единственный параметр, которым линк может управлять через
ареафикс. Этим обеспечивается надёжность режима реад-онли, который иногда
требуется...

Параметр 'l' не надо указывать в качестве дефолтов на эху или на группу, он
должен использоваться только рядом с теми линками, к которым он относится.

'm' - этот параметр запрещает управление подпиской через ареафикс. То есть
линк не может ни ставить себе 'l', ни убирать его. Этот параметр используется
для обеспечения mandatory-эх (если задан 'l') или недоступных для линка эх
(если 'l' не стоит).

'h' - этот параметр скрывает эту эху для линка. То есть эха не будет видна 
в ответах от ареафикса. Чаще всего имеет смысл только в дефолтах, но можно
эху скрыть и для конкретных линков.

Также этот параметр проверяется при генерации статистики - для отображения
статистики по этой эхе, она должна быть открыта для нашего адреса 
(main-address, первый адрес в конфиге).


                              Глава 14. Группы эх.
                            `======================'

  Предисловие:

Эхи можно объединять в группы, для каждой группы можно задать свои дефолтные
параметры. Для того, чтоб не писать кучу однотипных параметров.

Например, все локальные эхи у нас имеют тип базы squish. Чтоб не писать кучу
раз "-b squish" пишем это один раз при описании группы.

Еще группы бывают полезны: сообщения от афикса становятся нагляднее...

  Описание группы:

Такое описание должно существовать для каждой нашей группы, оно имеет вид:
 EchoGroup <group> [<descr>] -<key> <var> -<key> <var> ...

То есть сначала идет ключевое слово EchoGroup, потом - название группы (чаще
всего - одна буква, более того, я не тестировал работу с "длинными" названиями,
но, наверное, будет работать...), а потом - необязательное описание.

Описание не должно начинаться с символа "-", если оно содержит пробелы, оно
должно быть взять в кавычки (как и название, как и параметры и т.п.).

Далее идут пары key - value, которые считаются параметрами всех эх, входящих
в эту группу, кроме тех эх, где они переопределены (т.е. при описании эхи
задан этот же ключ с другим значением).

Примеры описаний групп тривильны:
 EchoGroup A "FidoNet Echoes" -b squish
 EchoGroup C -b jam
или просто
 EchoGroup B

  Описание режимов линковки эх группы:

Можно (и, кстати, очень желательно) задать некоторые дефолтные режимы для эх
какой-нить группы. Такое описание очень похоже на описание режимов группы, и
пишется оно так:
 GroupMode group[:mode] link:mode link:mode link:mode link:mode ...

То есть сначала идет кейворд GroupMode, потом - название группы и 
необязательное значение-режим по дефолту эх этой группы. В этом режиме не может
быть символов отрицания, т.к. смысла тут они не имеют: отрицать нечего. :-)

Потом идут описания линков с их режимами, которые действуют на всю группу.

  Приоритеты режимов:

Флаги обрабатываются независимо друг от друга. То есть флаг X, записанный в
одном месте никак не повлияет на флаг Y, записанный в любом другом месте.

Короче, если в дефолтах написано 'abcd', а у линка - 'qwe', значит линку 
будет приписано полноценное 'abcdqwe'. Но описание линка может перекрывать 
это заданиями явных отрицаний: 'abcd' в дефолтах и '!b!cdef' у линка дадут ему
'abdef'.

Наивысший приоритет, естественно, имеет описание линка у эхи в параметре 
EchoMode. Если там флаг (не)установлен, значит для линка он (не)установлен.

Меньший приоритет имеет описание линка в описании группы, еще меньший -
описание дефолтов эхи и самый маленький - описание дефолтов группы.

Соответственно, описания с большим приоритетом могут перекрывать описания с
меньшим.

Тут я приведу алгоритм, согласно которому происходит определение того, 
установлен произвольный флаг Z линку или нет. Итак...

0: Смотрим описание эхи (EchoMode), если там указан наш линк и стоит флаг Z,
значит флаг стоит. Если перед Z стоит "!", значит флаг не стоит. Иначе -
движемся дальше по цепочке.

1: Смотрим описание группы этой эхи (GroupMode), если у эхи указана группа.
Аналогично предыдущему: если узакан линк и стоит Z или !Z - значит флаг
стоит или не стоит соответственно. Если нет - движемся дальше.

2: Смотрим описание дефолтов эхи (в EchoMode). Если Z стоит - хорошо, если 
стоит "!Z" - тоже, если нет - проверяем следующий пункт.

3: Смотрим описание дефолтов группы, если она есть (GroupMode). Если стоит "Z",
значит флаг установлен, если не стоит, значит нет.

  Примеры:

Для всех групп очень рекомендую ставить дефолт 'rw'. Например, некоторый линк
подписан на все эхи этой группы:
 EchoGroup A:rw 2:50/13.13:l
Строка EchoMode тогда может не содержать описание линка. А если есть эхи,
на которые .13 не подписан, можно перекрыть:
 EchoMode Some_echo 2:50/13.13:!l
Или поставить в r/o:
 EchoMode Some_echo 2:50/13.13:!w

  < ... тут запись обрывается ... 
              ... наверное, побилась ваша файловая система. :-)
                         ... а может быть, конец просто еще не написан ...
                                    ... а может быть, это и есть конец ... >

